// Generated by Molecule 0.7.2

#define MOLECULEC_VERSION 7002
#define MOLECULE_API_VERSION_MIN 7000

#include "molecule_reader.h"
#include "molecule_builder.h"

#ifndef FS_H
#define FS_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef MOLECULE_API_DECORATOR
#define __DEFINE_MOLECULE_API_DECORATOR_FS
#define MOLECULE_API_DECORATOR
#endif /* MOLECULE_API_DECORATOR */

/*
 * Reader APIs
 */

#define                                 MolReader_Bytes_verify(s, c)                    mol_fixvec_verify(s, 1)
#define                                 MolReader_Bytes_length(s)                       mol_fixvec_length(s)
#define                                 MolReader_Bytes_get(s, i)                       mol_fixvec_slice_by_index(s, 1, i)
#define                                 MolReader_Bytes_raw_bytes(s)                    mol_fixvec_slice_raw_bytes(s)
#define                                 MolReader_Uint32_verify(s, c)                   mol_verify_fixed_size(s, 4)
#define                                 MolReader_Uint32_get_nth0(s)                    mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Uint32_get_nth1(s)                    mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Uint32_get_nth2(s)                    mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_Uint32_get_nth3(s)                    mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_Uint64_verify(s, c)                   mol_verify_fixed_size(s, 8)
#define                                 MolReader_Uint64_get_nth0(s)                    mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Uint64_get_nth1(s)                    mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Uint64_get_nth2(s)                    mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_Uint64_get_nth3(s)                    mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_Uint64_get_nth4(s)                    mol_slice_by_offset(s, 4, 1)
#define                                 MolReader_Uint64_get_nth5(s)                    mol_slice_by_offset(s, 5, 1)
#define                                 MolReader_Uint64_get_nth6(s)                    mol_slice_by_offset(s, 6, 1)
#define                                 MolReader_Uint64_get_nth7(s)                    mol_slice_by_offset(s, 7, 1)
#define                                 MolReader_Blob_verify(s, c)                     mol_verify_fixed_size(s, 8)
#define                                 MolReader_Blob_get_offset(s)                    mol_slice_by_offset(s, 0, 4)
#define                                 MolReader_Blob_get_length(s)                    mol_slice_by_offset(s, 4, 4)
#define                                 MolReader_FSEntry_verify(s, c)                  mol_verify_fixed_size(s, 16)
#define                                 MolReader_FSEntry_get_file_name(s)              mol_slice_by_offset(s, 0, 8)
#define                                 MolReader_FSEntry_get_file_content(s)           mol_slice_by_offset(s, 8, 8)
MOLECULE_API_DECORATOR  mol_errno       MolReader_File_verify                           (const mol_seg_t*, bool);
#define                                 MolReader_File_actual_field_count(s)            mol_table_actual_field_count(s)
#define                                 MolReader_File_has_extra_fields(s)              mol_table_has_extra_fields(s, 2)
#define                                 MolReader_File_get_name(s)                      mol_table_slice_by_index(s, 0)
#define                                 MolReader_File_get_content(s)                   mol_table_slice_by_index(s, 1)
#define                                 MolReader_FSMeta_verify(s, c)                   mol_fixvec_verify(s, 16)
#define                                 MolReader_FSMeta_length(s)                      mol_fixvec_length(s)
#define                                 MolReader_FSMeta_get(s, i)                      mol_fixvec_slice_by_index(s, 16, i)
MOLECULE_API_DECORATOR  mol_errno       MolReader_FS_verify                             (const mol_seg_t*, bool);
#define                                 MolReader_FS_actual_field_count(s)              mol_table_actual_field_count(s)
#define                                 MolReader_FS_has_extra_fields(s)                mol_table_has_extra_fields(s, 2)
#define                                 MolReader_FS_get_meta(s)                        mol_table_slice_by_index(s, 0)
#define                                 MolReader_FS_get_bytes(s)                       mol_table_slice_by_index(s, 1)

/*
 * Builder APIs
 */

#define                                 MolBuilder_Bytes_init(b)                        mol_fixvec_builder_initialize(b, 16)
#define                                 MolBuilder_Bytes_push(b, p)                     mol_fixvec_builder_push_byte(b, p)
#define                                 MolBuilder_Bytes_build(b)                       mol_fixvec_builder_finalize(b)
#define                                 MolBuilder_Bytes_clear(b)                       mol_builder_discard(b)
#define                                 MolBuilder_Uint32_init(b)                       mol_builder_initialize_fixed_size(b, 4)
#define                                 MolBuilder_Uint32_set_nth0(b, p)                mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Uint32_set_nth1(b, p)                mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_Uint32_set_nth2(b, p)                mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_Uint32_set_nth3(b, p)                mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_Uint32_build(b)                      mol_builder_finalize_simple(b)
#define                                 MolBuilder_Uint32_clear(b)                      mol_builder_discard(b)
#define                                 MolBuilder_Uint64_init(b)                       mol_builder_initialize_fixed_size(b, 8)
#define                                 MolBuilder_Uint64_set_nth0(b, p)                mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Uint64_set_nth1(b, p)                mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_Uint64_set_nth2(b, p)                mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_Uint64_set_nth3(b, p)                mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_Uint64_set_nth4(b, p)                mol_builder_set_byte_by_offset(b, 4, p)
#define                                 MolBuilder_Uint64_set_nth5(b, p)                mol_builder_set_byte_by_offset(b, 5, p)
#define                                 MolBuilder_Uint64_set_nth6(b, p)                mol_builder_set_byte_by_offset(b, 6, p)
#define                                 MolBuilder_Uint64_set_nth7(b, p)                mol_builder_set_byte_by_offset(b, 7, p)
#define                                 MolBuilder_Uint64_build(b)                      mol_builder_finalize_simple(b)
#define                                 MolBuilder_Uint64_clear(b)                      mol_builder_discard(b)
#define                                 MolBuilder_Blob_init(b)                         mol_builder_initialize_fixed_size(b, 8)
#define                                 MolBuilder_Blob_set_offset(b, p)                mol_builder_set_by_offset(b, 0, p, 4)
#define                                 MolBuilder_Blob_set_length(b, p)                mol_builder_set_by_offset(b, 4, p, 4)
#define                                 MolBuilder_Blob_build(b)                        mol_builder_finalize_simple(b)
#define                                 MolBuilder_Blob_clear(b)                        mol_builder_discard(b)
#define                                 MolBuilder_FSEntry_init(b)                      mol_builder_initialize_fixed_size(b, 16)
#define                                 MolBuilder_FSEntry_set_file_name(b, p)          mol_builder_set_by_offset(b, 0, p, 8)
#define                                 MolBuilder_FSEntry_set_file_content(b, p)       mol_builder_set_by_offset(b, 8, p, 8)
#define                                 MolBuilder_FSEntry_build(b)                     mol_builder_finalize_simple(b)
#define                                 MolBuilder_FSEntry_clear(b)                     mol_builder_discard(b)
#define                                 MolBuilder_File_init(b)                         mol_table_builder_initialize(b, 128, 2)
#define                                 MolBuilder_File_set_name(b, p, l)               mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_File_set_content(b, p, l)            mol_table_builder_add(b, 1, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_File_build                           (mol_builder_t);
#define                                 MolBuilder_File_clear(b)                        mol_builder_discard(b)
#define                                 MolBuilder_FSMeta_init(b)                       mol_fixvec_builder_initialize(b, 256)
#define                                 MolBuilder_FSMeta_push(b, p)                    mol_fixvec_builder_push(b, p, 16)
#define                                 MolBuilder_FSMeta_build(b)                      mol_fixvec_builder_finalize(b)
#define                                 MolBuilder_FSMeta_clear(b)                      mol_builder_discard(b)
#define                                 MolBuilder_FS_init(b)                           mol_table_builder_initialize(b, 128, 2)
#define                                 MolBuilder_FS_set_meta(b, p, l)                 mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_FS_set_bytes(b, p, l)                mol_table_builder_add(b, 1, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_FS_build                             (mol_builder_t);
#define                                 MolBuilder_FS_clear(b)                          mol_builder_discard(b)

/*
 * Default Value
 */

#define ____ 0x00

MOLECULE_API_DECORATOR const uint8_t MolDefault_Bytes[4]         =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Uint32[4]        =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Uint64[8]        =  {
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Blob[8]          =  {
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_FSEntry[16]      =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_File[20]         =  {
    0x14, ____, ____, ____, 0x0c, ____, ____, ____, 0x10, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_FSMeta[4]        =  {____, ____, ____, ____};
MOLECULE_API_DECORATOR const uint8_t MolDefault_FS[20]           =  {
    0x14, ____, ____, ____, 0x0c, ____, ____, ____, 0x10, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____,
};

#undef ____

/*
 * Reader Functions
 */

MOLECULE_API_DECORATOR mol_errno MolReader_File_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 2) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 2) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_FS_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 2) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 2) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_FSMeta_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}

/*
 * Builder Functions
 */

MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_File_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 12;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_FS_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 12;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_FSMeta, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}

#ifdef __DEFINE_MOLECULE_API_DECORATOR_FS
#undef MOLECULE_API_DECORATOR
#undef __DEFINE_MOLECULE_API_DECORATOR_FS
#endif /* __DEFINE_MOLECULE_API_DECORATOR_FS */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* FS_H */
